// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// versions:
//  binapi-generator: v0.11.0
//  VPP:              25.06-rc0~235-gf014e6a1d
// source: plugins/snort.api.json

// Package snort contains generated bindings for API file snort.api.
//
// Contents:
// - 25 messages
package snort

import (
	api "go.fd.io/govpp/api"
	_ "go.fd.io/govpp/binapi/interface_types"
	_ "go.fd.io/govpp/binapi/ip_types"
	codec "go.fd.io/govpp/codec"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion2

const (
	APIFile    = "snort"
	APIVersion = "1.0.0"
	VersionCrc = 0x8209b13d
)

// Details of a snort client.
//   - client index
//   - instance_index - snort instance of the client.
//
// SnortClientDetails defines message 'snort_client_details'.
type SnortClientDetails struct {
	InstanceIndex uint32 `binapi:"u32,name=instance_index" json:"instance_index,omitempty"`
}

func (m *SnortClientDetails) Reset()               { *m = SnortClientDetails{} }
func (*SnortClientDetails) GetMessageName() string { return "snort_client_details" }
func (*SnortClientDetails) GetCrcString() string   { return "7e29e6f5" }
func (*SnortClientDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SnortClientDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.InstanceIndex
	return size
}
func (m *SnortClientDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.InstanceIndex)
	return buf.Bytes(), nil
}
func (m *SnortClientDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.InstanceIndex = buf.DecodeUint32()
	return nil
}

// SnortClientDisconnect defines message 'snort_client_disconnect'.
type SnortClientDisconnect struct {
	SnortClientIndex uint32 `binapi:"u32,name=snort_client_index" json:"snort_client_index,omitempty"`
}

func (m *SnortClientDisconnect) Reset()               { *m = SnortClientDisconnect{} }
func (*SnortClientDisconnect) GetMessageName() string { return "snort_client_disconnect" }
func (*SnortClientDisconnect) GetCrcString() string   { return "30a221a6" }
func (*SnortClientDisconnect) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SnortClientDisconnect) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SnortClientIndex
	return size
}
func (m *SnortClientDisconnect) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.SnortClientIndex)
	return buf.Bytes(), nil
}
func (m *SnortClientDisconnect) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SnortClientIndex = buf.DecodeUint32()
	return nil
}

// SnortClientDisconnectReply defines message 'snort_client_disconnect_reply'.
type SnortClientDisconnectReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *SnortClientDisconnectReply) Reset()               { *m = SnortClientDisconnectReply{} }
func (*SnortClientDisconnectReply) GetMessageName() string { return "snort_client_disconnect_reply" }
func (*SnortClientDisconnectReply) GetCrcString() string   { return "e8d4e804" }
func (*SnortClientDisconnectReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SnortClientDisconnectReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *SnortClientDisconnectReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *SnortClientDisconnectReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Get snort clients.
//   - cursor - current iterator value (all requested).
//
// SnortClientGet defines message 'snort_client_get'.
type SnortClientGet struct {
	Cursor           uint32 `binapi:"u32,name=cursor" json:"cursor,omitempty"`
	SnortClientIndex uint32 `binapi:"u32,name=snort_client_index" json:"snort_client_index,omitempty"`
}

func (m *SnortClientGet) Reset()               { *m = SnortClientGet{} }
func (*SnortClientGet) GetMessageName() string { return "snort_client_get" }
func (*SnortClientGet) GetCrcString() string   { return "51d54b70" }
func (*SnortClientGet) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SnortClientGet) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Cursor
	size += 4 // m.SnortClientIndex
	return size
}
func (m *SnortClientGet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Cursor)
	buf.EncodeUint32(m.SnortClientIndex)
	return buf.Bytes(), nil
}
func (m *SnortClientGet) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Cursor = buf.DecodeUint32()
	m.SnortClientIndex = buf.DecodeUint32()
	return nil
}

// Reply for snort clients.
//   - retval - return code for the request.
//   - cursor - iterator value to continue with (if there is more).
//
// SnortClientGetReply defines message 'snort_client_get_reply'.
type SnortClientGetReply struct {
	Retval int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	Cursor uint32 `binapi:"u32,name=cursor" json:"cursor,omitempty"`
}

func (m *SnortClientGetReply) Reset()               { *m = SnortClientGetReply{} }
func (*SnortClientGetReply) GetMessageName() string { return "snort_client_get_reply" }
func (*SnortClientGetReply) GetCrcString() string   { return "53b48f5d" }
func (*SnortClientGetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SnortClientGetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.Cursor
	return size
}
func (m *SnortClientGetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(m.Cursor)
	return buf.Bytes(), nil
}
func (m *SnortClientGetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.Cursor = buf.DecodeUint32()
	return nil
}

// SnortInputModeGet defines message 'snort_input_mode_get'.
type SnortInputModeGet struct{}

func (m *SnortInputModeGet) Reset()               { *m = SnortInputModeGet{} }
func (*SnortInputModeGet) GetMessageName() string { return "snort_input_mode_get" }
func (*SnortInputModeGet) GetCrcString() string   { return "51077d14" }
func (*SnortInputModeGet) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SnortInputModeGet) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *SnortInputModeGet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *SnortInputModeGet) Unmarshal(b []byte) error {
	return nil
}

// SnortInputModeGetReply defines message 'snort_input_mode_get_reply'.
type SnortInputModeGetReply struct {
	Retval    int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	SnortMode uint32 `binapi:"u32,name=snort_mode" json:"snort_mode,omitempty"`
}

func (m *SnortInputModeGetReply) Reset()               { *m = SnortInputModeGetReply{} }
func (*SnortInputModeGetReply) GetMessageName() string { return "snort_input_mode_get_reply" }
func (*SnortInputModeGetReply) GetCrcString() string   { return "a18796bf" }
func (*SnortInputModeGetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SnortInputModeGetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.SnortMode
	return size
}
func (m *SnortInputModeGetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(m.SnortMode)
	return buf.Bytes(), nil
}
func (m *SnortInputModeGetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.SnortMode = buf.DecodeUint32()
	return nil
}

// SnortInputModeSet defines message 'snort_input_mode_set'.
type SnortInputModeSet struct {
	InputMode uint8 `binapi:"u8,name=input_mode" json:"input_mode,omitempty"`
}

func (m *SnortInputModeSet) Reset()               { *m = SnortInputModeSet{} }
func (*SnortInputModeSet) GetMessageName() string { return "snort_input_mode_set" }
func (*SnortInputModeSet) GetCrcString() string   { return "d595d008" }
func (*SnortInputModeSet) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SnortInputModeSet) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.InputMode
	return size
}
func (m *SnortInputModeSet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.InputMode)
	return buf.Bytes(), nil
}
func (m *SnortInputModeSet) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.InputMode = buf.DecodeUint8()
	return nil
}

// SnortInputModeSetReply defines message 'snort_input_mode_set_reply'.
type SnortInputModeSetReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *SnortInputModeSetReply) Reset()               { *m = SnortInputModeSetReply{} }
func (*SnortInputModeSetReply) GetMessageName() string { return "snort_input_mode_set_reply" }
func (*SnortInputModeSetReply) GetCrcString() string   { return "e8d4e804" }
func (*SnortInputModeSetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SnortInputModeSetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *SnortInputModeSetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *SnortInputModeSetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// SnortInstanceCreate defines message 'snort_instance_create'.
type SnortInstanceCreate struct {
	QueueSize        uint32 `binapi:"u32,name=queue_size" json:"queue_size,omitempty"`
	DropOnDisconnect uint8  `binapi:"u8,name=drop_on_disconnect" json:"drop_on_disconnect,omitempty"`
	Name             string `binapi:"string[],name=name" json:"name,omitempty"`
}

func (m *SnortInstanceCreate) Reset()               { *m = SnortInstanceCreate{} }
func (*SnortInstanceCreate) GetMessageName() string { return "snort_instance_create" }
func (*SnortInstanceCreate) GetCrcString() string   { return "248cc390" }
func (*SnortInstanceCreate) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SnortInstanceCreate) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4               // m.QueueSize
	size += 1               // m.DropOnDisconnect
	size += 4 + len(m.Name) // m.Name
	return size
}
func (m *SnortInstanceCreate) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.QueueSize)
	buf.EncodeUint8(m.DropOnDisconnect)
	buf.EncodeString(m.Name, 0)
	return buf.Bytes(), nil
}
func (m *SnortInstanceCreate) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.QueueSize = buf.DecodeUint32()
	m.DropOnDisconnect = buf.DecodeUint8()
	m.Name = buf.DecodeString(0)
	return nil
}

// SnortInstanceCreateReply defines message 'snort_instance_create_reply'.
type SnortInstanceCreateReply struct {
	Retval        int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	InstanceIndex uint32 `binapi:"u32,name=instance_index" json:"instance_index,omitempty"`
}

func (m *SnortInstanceCreateReply) Reset()               { *m = SnortInstanceCreateReply{} }
func (*SnortInstanceCreateReply) GetMessageName() string { return "snort_instance_create_reply" }
func (*SnortInstanceCreateReply) GetCrcString() string   { return "e63a3fba" }
func (*SnortInstanceCreateReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SnortInstanceCreateReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.InstanceIndex
	return size
}
func (m *SnortInstanceCreateReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(m.InstanceIndex)
	return buf.Bytes(), nil
}
func (m *SnortInstanceCreateReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.InstanceIndex = buf.DecodeUint32()
	return nil
}

// SnortInstanceDelete defines message 'snort_instance_delete'.
type SnortInstanceDelete struct {
	InstanceIndex uint32 `binapi:"u32,name=instance_index" json:"instance_index,omitempty"`
}

func (m *SnortInstanceDelete) Reset()               { *m = SnortInstanceDelete{} }
func (*SnortInstanceDelete) GetMessageName() string { return "snort_instance_delete" }
func (*SnortInstanceDelete) GetCrcString() string   { return "6981211a" }
func (*SnortInstanceDelete) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SnortInstanceDelete) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.InstanceIndex
	return size
}
func (m *SnortInstanceDelete) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.InstanceIndex)
	return buf.Bytes(), nil
}
func (m *SnortInstanceDelete) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.InstanceIndex = buf.DecodeUint32()
	return nil
}

// SnortInstanceDeleteReply defines message 'snort_instance_delete_reply'.
type SnortInstanceDeleteReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *SnortInstanceDeleteReply) Reset()               { *m = SnortInstanceDeleteReply{} }
func (*SnortInstanceDeleteReply) GetMessageName() string { return "snort_instance_delete_reply" }
func (*SnortInstanceDeleteReply) GetCrcString() string   { return "e8d4e804" }
func (*SnortInstanceDeleteReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SnortInstanceDeleteReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *SnortInstanceDeleteReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *SnortInstanceDeleteReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Details of a snort instance.
//   - instance - snort instance info.
//
// SnortInstanceDetails defines message 'snort_instance_details'.
type SnortInstanceDetails struct {
	InstanceIndex    uint32 `binapi:"u32,name=instance_index" json:"instance_index,omitempty"`
	ShmSize          uint32 `binapi:"u32,name=shm_size" json:"shm_size,omitempty"`
	ShmFd            uint32 `binapi:"u32,name=shm_fd" json:"shm_fd,omitempty"`
	DropOnDisconnect uint8  `binapi:"u8,name=drop_on_disconnect" json:"drop_on_disconnect,omitempty"`
	SnortClientIndex uint32 `binapi:"u32,name=snort_client_index" json:"snort_client_index,omitempty"`
	Name             string `binapi:"string[],name=name" json:"name,omitempty"`
}

func (m *SnortInstanceDetails) Reset()               { *m = SnortInstanceDetails{} }
func (*SnortInstanceDetails) GetMessageName() string { return "snort_instance_details" }
func (*SnortInstanceDetails) GetCrcString() string   { return "abb60d49" }
func (*SnortInstanceDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SnortInstanceDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4               // m.InstanceIndex
	size += 4               // m.ShmSize
	size += 4               // m.ShmFd
	size += 1               // m.DropOnDisconnect
	size += 4               // m.SnortClientIndex
	size += 4 + len(m.Name) // m.Name
	return size
}
func (m *SnortInstanceDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.InstanceIndex)
	buf.EncodeUint32(m.ShmSize)
	buf.EncodeUint32(m.ShmFd)
	buf.EncodeUint8(m.DropOnDisconnect)
	buf.EncodeUint32(m.SnortClientIndex)
	buf.EncodeString(m.Name, 0)
	return buf.Bytes(), nil
}
func (m *SnortInstanceDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.InstanceIndex = buf.DecodeUint32()
	m.ShmSize = buf.DecodeUint32()
	m.ShmFd = buf.DecodeUint32()
	m.DropOnDisconnect = buf.DecodeUint8()
	m.SnortClientIndex = buf.DecodeUint32()
	m.Name = buf.DecodeString(0)
	return nil
}

// SnortInstanceDisconnect defines message 'snort_instance_disconnect'.
type SnortInstanceDisconnect struct {
	InstanceIndex uint32 `binapi:"u32,name=instance_index" json:"instance_index,omitempty"`
}

func (m *SnortInstanceDisconnect) Reset()               { *m = SnortInstanceDisconnect{} }
func (*SnortInstanceDisconnect) GetMessageName() string { return "snort_instance_disconnect" }
func (*SnortInstanceDisconnect) GetCrcString() string   { return "6981211a" }
func (*SnortInstanceDisconnect) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SnortInstanceDisconnect) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.InstanceIndex
	return size
}
func (m *SnortInstanceDisconnect) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.InstanceIndex)
	return buf.Bytes(), nil
}
func (m *SnortInstanceDisconnect) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.InstanceIndex = buf.DecodeUint32()
	return nil
}

// SnortInstanceDisconnectReply defines message 'snort_instance_disconnect_reply'.
type SnortInstanceDisconnectReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *SnortInstanceDisconnectReply) Reset() { *m = SnortInstanceDisconnectReply{} }
func (*SnortInstanceDisconnectReply) GetMessageName() string {
	return "snort_instance_disconnect_reply"
}
func (*SnortInstanceDisconnectReply) GetCrcString() string { return "e8d4e804" }
func (*SnortInstanceDisconnectReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SnortInstanceDisconnectReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *SnortInstanceDisconnectReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *SnortInstanceDisconnectReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Get snort instance(s).
//   - cursor - current iterator value (all requested).
//   - instance_index - instance index (~0 for all).
//
// SnortInstanceGet defines message 'snort_instance_get'.
type SnortInstanceGet struct {
	Cursor        uint32 `binapi:"u32,name=cursor" json:"cursor,omitempty"`
	InstanceIndex uint32 `binapi:"u32,name=instance_index" json:"instance_index,omitempty"`
}

func (m *SnortInstanceGet) Reset()               { *m = SnortInstanceGet{} }
func (*SnortInstanceGet) GetMessageName() string { return "snort_instance_get" }
func (*SnortInstanceGet) GetCrcString() string   { return "07c37475" }
func (*SnortInstanceGet) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SnortInstanceGet) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Cursor
	size += 4 // m.InstanceIndex
	return size
}
func (m *SnortInstanceGet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Cursor)
	buf.EncodeUint32(m.InstanceIndex)
	return buf.Bytes(), nil
}
func (m *SnortInstanceGet) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Cursor = buf.DecodeUint32()
	m.InstanceIndex = buf.DecodeUint32()
	return nil
}

// Reply for snort instance(s).
//   - retval - return code for the request.
//   - cursor - iterator value to continue with (if there is more).
//
// SnortInstanceGetReply defines message 'snort_instance_get_reply'.
type SnortInstanceGetReply struct {
	Retval int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	Cursor uint32 `binapi:"u32,name=cursor" json:"cursor,omitempty"`
}

func (m *SnortInstanceGetReply) Reset()               { *m = SnortInstanceGetReply{} }
func (*SnortInstanceGetReply) GetMessageName() string { return "snort_instance_get_reply" }
func (*SnortInstanceGetReply) GetCrcString() string   { return "53b48f5d" }
func (*SnortInstanceGetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SnortInstanceGetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.Cursor
	return size
}
func (m *SnortInstanceGetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(m.Cursor)
	return buf.Bytes(), nil
}
func (m *SnortInstanceGetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.Cursor = buf.DecodeUint32()
	return nil
}

// SnortInterfaceAttach defines message 'snort_interface_attach'.
type SnortInterfaceAttach struct {
	InstanceIndex uint32 `binapi:"u32,name=instance_index" json:"instance_index,omitempty"`
	SwIfIndex     uint32 `binapi:"u32,name=sw_if_index" json:"sw_if_index,omitempty"`
	SnortDir      uint8  `binapi:"u8,name=snort_dir" json:"snort_dir,omitempty"`
}

func (m *SnortInterfaceAttach) Reset()               { *m = SnortInterfaceAttach{} }
func (*SnortInterfaceAttach) GetMessageName() string { return "snort_interface_attach" }
func (*SnortInterfaceAttach) GetCrcString() string   { return "79ceda89" }
func (*SnortInterfaceAttach) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SnortInterfaceAttach) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.InstanceIndex
	size += 4 // m.SwIfIndex
	size += 1 // m.SnortDir
	return size
}
func (m *SnortInterfaceAttach) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.InstanceIndex)
	buf.EncodeUint32(m.SwIfIndex)
	buf.EncodeUint8(m.SnortDir)
	return buf.Bytes(), nil
}
func (m *SnortInterfaceAttach) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.InstanceIndex = buf.DecodeUint32()
	m.SwIfIndex = buf.DecodeUint32()
	m.SnortDir = buf.DecodeUint8()
	return nil
}

// SnortInterfaceAttachReply defines message 'snort_interface_attach_reply'.
type SnortInterfaceAttachReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *SnortInterfaceAttachReply) Reset()               { *m = SnortInterfaceAttachReply{} }
func (*SnortInterfaceAttachReply) GetMessageName() string { return "snort_interface_attach_reply" }
func (*SnortInterfaceAttachReply) GetCrcString() string   { return "e8d4e804" }
func (*SnortInterfaceAttachReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SnortInterfaceAttachReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *SnortInterfaceAttachReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *SnortInterfaceAttachReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// SnortInterfaceDetach defines message 'snort_interface_detach'.
type SnortInterfaceDetach struct {
	SwIfIndex uint32 `binapi:"u32,name=sw_if_index" json:"sw_if_index,omitempty"`
}

func (m *SnortInterfaceDetach) Reset()               { *m = SnortInterfaceDetach{} }
func (*SnortInterfaceDetach) GetMessageName() string { return "snort_interface_detach" }
func (*SnortInterfaceDetach) GetCrcString() string   { return "529cb13f" }
func (*SnortInterfaceDetach) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SnortInterfaceDetach) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SwIfIndex
	return size
}
func (m *SnortInterfaceDetach) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.SwIfIndex)
	return buf.Bytes(), nil
}
func (m *SnortInterfaceDetach) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = buf.DecodeUint32()
	return nil
}

// SnortInterfaceDetachReply defines message 'snort_interface_detach_reply'.
type SnortInterfaceDetachReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *SnortInterfaceDetachReply) Reset()               { *m = SnortInterfaceDetachReply{} }
func (*SnortInterfaceDetachReply) GetMessageName() string { return "snort_interface_detach_reply" }
func (*SnortInterfaceDetachReply) GetCrcString() string   { return "e8d4e804" }
func (*SnortInterfaceDetachReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SnortInterfaceDetachReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *SnortInterfaceDetachReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *SnortInterfaceDetachReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Details of a snort interface.
//   - sw_if_index - interface index
//   - instance_index - snort instance the interface is attached to.
//
// SnortInterfaceDetails defines message 'snort_interface_details'.
type SnortInterfaceDetails struct {
	SwIfIndex     uint32 `binapi:"u32,name=sw_if_index" json:"sw_if_index,omitempty"`
	InstanceIndex uint32 `binapi:"u32,name=instance_index" json:"instance_index,omitempty"`
}

func (m *SnortInterfaceDetails) Reset()               { *m = SnortInterfaceDetails{} }
func (*SnortInterfaceDetails) GetMessageName() string { return "snort_interface_details" }
func (*SnortInterfaceDetails) GetCrcString() string   { return "52c75990" }
func (*SnortInterfaceDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SnortInterfaceDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SwIfIndex
	size += 4 // m.InstanceIndex
	return size
}
func (m *SnortInterfaceDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.SwIfIndex)
	buf.EncodeUint32(m.InstanceIndex)
	return buf.Bytes(), nil
}
func (m *SnortInterfaceDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = buf.DecodeUint32()
	m.InstanceIndex = buf.DecodeUint32()
	return nil
}

// Get snort interface(s).
//   - cursor - current iterator value (all requested).
//   - sw_if_index - sw if index (~0 for all).
//
// SnortInterfaceGet defines message 'snort_interface_get'.
type SnortInterfaceGet struct {
	Cursor    uint32 `binapi:"u32,name=cursor" json:"cursor,omitempty"`
	SwIfIndex uint32 `binapi:"u32,name=sw_if_index" json:"sw_if_index,omitempty"`
}

func (m *SnortInterfaceGet) Reset()               { *m = SnortInterfaceGet{} }
func (*SnortInterfaceGet) GetMessageName() string { return "snort_interface_get" }
func (*SnortInterfaceGet) GetCrcString() string   { return "765a2424" }
func (*SnortInterfaceGet) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SnortInterfaceGet) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Cursor
	size += 4 // m.SwIfIndex
	return size
}
func (m *SnortInterfaceGet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Cursor)
	buf.EncodeUint32(m.SwIfIndex)
	return buf.Bytes(), nil
}
func (m *SnortInterfaceGet) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Cursor = buf.DecodeUint32()
	m.SwIfIndex = buf.DecodeUint32()
	return nil
}

// Reply for snort interface(s).
//   - retval - return code for the request.
//   - cursor - iterator value to continue with (if there is more).
//
// SnortInterfaceGetReply defines message 'snort_interface_get_reply'.
type SnortInterfaceGetReply struct {
	Retval int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	Cursor uint32 `binapi:"u32,name=cursor" json:"cursor,omitempty"`
}

func (m *SnortInterfaceGetReply) Reset()               { *m = SnortInterfaceGetReply{} }
func (*SnortInterfaceGetReply) GetMessageName() string { return "snort_interface_get_reply" }
func (*SnortInterfaceGetReply) GetCrcString() string   { return "53b48f5d" }
func (*SnortInterfaceGetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SnortInterfaceGetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.Cursor
	return size
}
func (m *SnortInterfaceGetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(m.Cursor)
	return buf.Bytes(), nil
}
func (m *SnortInterfaceGetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.Cursor = buf.DecodeUint32()
	return nil
}

func init() { file_snort_binapi_init() }
func file_snort_binapi_init() {
	api.RegisterMessage((*SnortClientDetails)(nil), "snort_client_details_7e29e6f5")
	api.RegisterMessage((*SnortClientDisconnect)(nil), "snort_client_disconnect_30a221a6")
	api.RegisterMessage((*SnortClientDisconnectReply)(nil), "snort_client_disconnect_reply_e8d4e804")
	api.RegisterMessage((*SnortClientGet)(nil), "snort_client_get_51d54b70")
	api.RegisterMessage((*SnortClientGetReply)(nil), "snort_client_get_reply_53b48f5d")
	api.RegisterMessage((*SnortInputModeGet)(nil), "snort_input_mode_get_51077d14")
	api.RegisterMessage((*SnortInputModeGetReply)(nil), "snort_input_mode_get_reply_a18796bf")
	api.RegisterMessage((*SnortInputModeSet)(nil), "snort_input_mode_set_d595d008")
	api.RegisterMessage((*SnortInputModeSetReply)(nil), "snort_input_mode_set_reply_e8d4e804")
	api.RegisterMessage((*SnortInstanceCreate)(nil), "snort_instance_create_248cc390")
	api.RegisterMessage((*SnortInstanceCreateReply)(nil), "snort_instance_create_reply_e63a3fba")
	api.RegisterMessage((*SnortInstanceDelete)(nil), "snort_instance_delete_6981211a")
	api.RegisterMessage((*SnortInstanceDeleteReply)(nil), "snort_instance_delete_reply_e8d4e804")
	api.RegisterMessage((*SnortInstanceDetails)(nil), "snort_instance_details_abb60d49")
	api.RegisterMessage((*SnortInstanceDisconnect)(nil), "snort_instance_disconnect_6981211a")
	api.RegisterMessage((*SnortInstanceDisconnectReply)(nil), "snort_instance_disconnect_reply_e8d4e804")
	api.RegisterMessage((*SnortInstanceGet)(nil), "snort_instance_get_07c37475")
	api.RegisterMessage((*SnortInstanceGetReply)(nil), "snort_instance_get_reply_53b48f5d")
	api.RegisterMessage((*SnortInterfaceAttach)(nil), "snort_interface_attach_79ceda89")
	api.RegisterMessage((*SnortInterfaceAttachReply)(nil), "snort_interface_attach_reply_e8d4e804")
	api.RegisterMessage((*SnortInterfaceDetach)(nil), "snort_interface_detach_529cb13f")
	api.RegisterMessage((*SnortInterfaceDetachReply)(nil), "snort_interface_detach_reply_e8d4e804")
	api.RegisterMessage((*SnortInterfaceDetails)(nil), "snort_interface_details_52c75990")
	api.RegisterMessage((*SnortInterfaceGet)(nil), "snort_interface_get_765a2424")
	api.RegisterMessage((*SnortInterfaceGetReply)(nil), "snort_interface_get_reply_53b48f5d")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*SnortClientDetails)(nil),
		(*SnortClientDisconnect)(nil),
		(*SnortClientDisconnectReply)(nil),
		(*SnortClientGet)(nil),
		(*SnortClientGetReply)(nil),
		(*SnortInputModeGet)(nil),
		(*SnortInputModeGetReply)(nil),
		(*SnortInputModeSet)(nil),
		(*SnortInputModeSetReply)(nil),
		(*SnortInstanceCreate)(nil),
		(*SnortInstanceCreateReply)(nil),
		(*SnortInstanceDelete)(nil),
		(*SnortInstanceDeleteReply)(nil),
		(*SnortInstanceDetails)(nil),
		(*SnortInstanceDisconnect)(nil),
		(*SnortInstanceDisconnectReply)(nil),
		(*SnortInstanceGet)(nil),
		(*SnortInstanceGetReply)(nil),
		(*SnortInterfaceAttach)(nil),
		(*SnortInterfaceAttachReply)(nil),
		(*SnortInterfaceDetach)(nil),
		(*SnortInterfaceDetachReply)(nil),
		(*SnortInterfaceDetails)(nil),
		(*SnortInterfaceGet)(nil),
		(*SnortInterfaceGetReply)(nil),
	}
}
