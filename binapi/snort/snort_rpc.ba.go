// Code generated by GoVPP's binapi-generator. DO NOT EDIT.

package snort

import (
	"context"
	"fmt"
	"io"

	api "go.fd.io/govpp/api"
)

// RPCService defines RPC service snort.
type RPCService interface {
	SnortClientDisconnect(ctx context.Context, in *SnortClientDisconnect) (*SnortClientDisconnectReply, error)
	SnortClientGet(ctx context.Context, in *SnortClientGet) (RPCService_SnortClientGetClient, error)
	SnortInputModeGet(ctx context.Context, in *SnortInputModeGet) (*SnortInputModeGetReply, error)
	SnortInputModeSet(ctx context.Context, in *SnortInputModeSet) (*SnortInputModeSetReply, error)
	SnortInstanceCreate(ctx context.Context, in *SnortInstanceCreate) (*SnortInstanceCreateReply, error)
	SnortInstanceDelete(ctx context.Context, in *SnortInstanceDelete) (*SnortInstanceDeleteReply, error)
	SnortInstanceDisconnect(ctx context.Context, in *SnortInstanceDisconnect) (*SnortInstanceDisconnectReply, error)
	SnortInstanceGet(ctx context.Context, in *SnortInstanceGet) (RPCService_SnortInstanceGetClient, error)
	SnortInterfaceAttach(ctx context.Context, in *SnortInterfaceAttach) (*SnortInterfaceAttachReply, error)
	SnortInterfaceDetach(ctx context.Context, in *SnortInterfaceDetach) (*SnortInterfaceDetachReply, error)
	SnortInterfaceGet(ctx context.Context, in *SnortInterfaceGet) (RPCService_SnortInterfaceGetClient, error)
}

type serviceClient struct {
	conn api.Connection
}

func NewServiceClient(conn api.Connection) RPCService {
	return &serviceClient{conn}
}

func (c *serviceClient) SnortClientDisconnect(ctx context.Context, in *SnortClientDisconnect) (*SnortClientDisconnectReply, error) {
	out := new(SnortClientDisconnectReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) SnortClientGet(ctx context.Context, in *SnortClientGet) (RPCService_SnortClientGetClient, error) {
	stream, err := c.conn.NewStream(ctx)
	if err != nil {
		return nil, err
	}
	x := &serviceClient_SnortClientGetClient{stream}
	if err := x.Stream.SendMsg(in); err != nil {
		return nil, err
	}
	return x, nil
}

type RPCService_SnortClientGetClient interface {
	Recv() (*SnortClientDetails, *SnortClientGetReply, error)
	api.Stream
}

type serviceClient_SnortClientGetClient struct {
	api.Stream
}

func (c *serviceClient_SnortClientGetClient) Recv() (*SnortClientDetails, *SnortClientGetReply, error) {
	msg, err := c.Stream.RecvMsg()
	if err != nil {
		return nil, nil, err
	}
	switch m := msg.(type) {
	case *SnortClientDetails:
		return m, nil, nil
	case *SnortClientGetReply:
		if err := api.RetvalToVPPApiError(m.Retval); err != nil {
			c.Stream.Close()
			return nil, m, err
		}
		err = c.Stream.Close()
		if err != nil {
			return nil, m, err
		}
		return nil, m, io.EOF
	default:
		return nil, nil, fmt.Errorf("unexpected message: %T %v", m, m)
	}
}

func (c *serviceClient) SnortInputModeGet(ctx context.Context, in *SnortInputModeGet) (*SnortInputModeGetReply, error) {
	out := new(SnortInputModeGetReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) SnortInputModeSet(ctx context.Context, in *SnortInputModeSet) (*SnortInputModeSetReply, error) {
	out := new(SnortInputModeSetReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) SnortInstanceCreate(ctx context.Context, in *SnortInstanceCreate) (*SnortInstanceCreateReply, error) {
	out := new(SnortInstanceCreateReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) SnortInstanceDelete(ctx context.Context, in *SnortInstanceDelete) (*SnortInstanceDeleteReply, error) {
	out := new(SnortInstanceDeleteReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) SnortInstanceDisconnect(ctx context.Context, in *SnortInstanceDisconnect) (*SnortInstanceDisconnectReply, error) {
	out := new(SnortInstanceDisconnectReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) SnortInstanceGet(ctx context.Context, in *SnortInstanceGet) (RPCService_SnortInstanceGetClient, error) {
	stream, err := c.conn.NewStream(ctx)
	if err != nil {
		return nil, err
	}
	x := &serviceClient_SnortInstanceGetClient{stream}
	if err := x.Stream.SendMsg(in); err != nil {
		return nil, err
	}
	return x, nil
}

type RPCService_SnortInstanceGetClient interface {
	Recv() (*SnortInstanceDetails, *SnortInstanceGetReply, error)
	api.Stream
}

type serviceClient_SnortInstanceGetClient struct {
	api.Stream
}

func (c *serviceClient_SnortInstanceGetClient) Recv() (*SnortInstanceDetails, *SnortInstanceGetReply, error) {
	msg, err := c.Stream.RecvMsg()
	if err != nil {
		return nil, nil, err
	}
	switch m := msg.(type) {
	case *SnortInstanceDetails:
		return m, nil, nil
	case *SnortInstanceGetReply:
		if err := api.RetvalToVPPApiError(m.Retval); err != nil {
			c.Stream.Close()
			return nil, m, err
		}
		err = c.Stream.Close()
		if err != nil {
			return nil, m, err
		}
		return nil, m, io.EOF
	default:
		return nil, nil, fmt.Errorf("unexpected message: %T %v", m, m)
	}
}

func (c *serviceClient) SnortInterfaceAttach(ctx context.Context, in *SnortInterfaceAttach) (*SnortInterfaceAttachReply, error) {
	out := new(SnortInterfaceAttachReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) SnortInterfaceDetach(ctx context.Context, in *SnortInterfaceDetach) (*SnortInterfaceDetachReply, error) {
	out := new(SnortInterfaceDetachReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) SnortInterfaceGet(ctx context.Context, in *SnortInterfaceGet) (RPCService_SnortInterfaceGetClient, error) {
	stream, err := c.conn.NewStream(ctx)
	if err != nil {
		return nil, err
	}
	x := &serviceClient_SnortInterfaceGetClient{stream}
	if err := x.Stream.SendMsg(in); err != nil {
		return nil, err
	}
	return x, nil
}

type RPCService_SnortInterfaceGetClient interface {
	Recv() (*SnortInterfaceDetails, *SnortInterfaceGetReply, error)
	api.Stream
}

type serviceClient_SnortInterfaceGetClient struct {
	api.Stream
}

func (c *serviceClient_SnortInterfaceGetClient) Recv() (*SnortInterfaceDetails, *SnortInterfaceGetReply, error) {
	msg, err := c.Stream.RecvMsg()
	if err != nil {
		return nil, nil, err
	}
	switch m := msg.(type) {
	case *SnortInterfaceDetails:
		return m, nil, nil
	case *SnortInterfaceGetReply:
		if err := api.RetvalToVPPApiError(m.Retval); err != nil {
			c.Stream.Close()
			return nil, m, err
		}
		err = c.Stream.Close()
		if err != nil {
			return nil, m, err
		}
		return nil, m, io.EOF
	default:
		return nil, nil, fmt.Errorf("unexpected message: %T %v", m, m)
	}
}
